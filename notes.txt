01. flux is available over time, all of streams values are available at once.

02. Flux returns 0-N items over time, Mono returns 0 or 1 items.

03. Using block() returns value from mono.

04. blockFirst() and blockLast() used on Flux.

05. // just like RxJS
   ReactiveSources.intNumberMono().subscribe(
           integer -> System.out.println(integer),
           error -> System.out.println(error.getMessage()),
           () -> System.out.println("Done")
   );

06. ReactiveSources.intNumbersFlux().subscribe( // slightly different way of doing error handling and completion
           System.out::println,
           System.err::println,
           () -> System.out.println("Done")
   );

07. Use .log() after a flux/mono to debug

08. Use .timeout() after a flux/mono to terminate process after a set time, takes Duration class/object.

09. .take() works for flux/mono the same way .limit() works for stream.

10. .skip() works for both flux/mono and stream.

11. .repeat(), .distinct() and .distinctUntilChanged() [works as the name suggests]

12. .defaultIfEmpty(), works when no value found in a flux

13.

